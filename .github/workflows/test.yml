name: test for workflow
on:
  push:
    branches:
      - main
jobs:
    notes:
        runs-on: ubuntu-latest
        steps:
          - name: Cloing repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Get Latest Release Notes
            id: get_release_notes
            run: |
                RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/latest")

                RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body')
                echo "Release Notes: $RELEASE_NOTES"
                
                echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
                echo "$RELEASE_NOTES" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV

          - name: Format Release Notes
            id: format_notes
            run: |
              {
                echo "**🚀 Features**"
                grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' <<< "$RELEASE_NOTES" | head -n 5 | sed -E 's/(\*\s\[[a-f0-9]+\]\(.*\)):\s[^:]+:\s/\1 : /g' || echo "None"
                echo ""
    
                echo "**🐛 Fixes**"
                grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfix' <<< "$RELEASE_NOTES" | head -n 5 | sed -E 's/(\*\s\[[a-f0-9]+\]\(.*\)):\s[^:]+:\s/\1 : /g' || echo "None"
                echo ""
    
                echo "**🛠 Chores**"
                grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\schore' <<< "$RELEASE_NOTES" | head -n 5 | sed -E 's/(\*\s\[[a-f0-9]+\]\(.*\)):\s[^:]+:\s/\1 : /g' || echo "None"
                echo ""
              } > formatted_notes.txt
    
              cat formatted_notes.txt
    
              FORMATTED_NOTES=$(cat formatted_notes.txt)
              echo "FORMATTED_NOTES<<EOF" >> $GITHUB_ENV
              echo "$FORMATTED_NOTES" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              
          - name: Send message to Discord
            env:
                DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
            run: |
                # Ensure proper JSON formatting
                JSON_PAYLOAD=$(jq -Rs --arg content "$FORMATTED_NOTES" '{"content": $content}')
                
                # Send the message to Discord using the webhook
                curl -H "Content-Type: application/json" \
                    -X POST \
                    -d "$JSON_PAYLOAD" \
                    $DISCORD_WEBHOOK_URL


          - name: Send message to Telegram
            env:
                TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
                TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
                TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_TOPIC }}
            run: |

                echo "$FORMATTED_NOTES" > markdown.txt
                chmod +x scripts/tel_parser.sed
                ./scripts/tel_parser.sed markdown.txt >> output.txt

                markdown_info_tel=$(< output.txt)

                echo "$markdown_info_tel"
            
                # Send message to Telegram
                curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                    -d "chat_id=$TELEGRAM_CHAT_ID" \
                    -d "message_thread_id=$TELEGRAM_TOPIC" \
                    -d "text=$markdown_info_tel" \
                    -d "parse_mode=HTML" \
                    -d "disable_web_page_preview=true"
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
          
