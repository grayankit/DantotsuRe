name: RELEASE
on:
  push:
    tags:
      - "v*.*.*"
jobs:
  build_android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Setup Cmake
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.18.1"
      # Install Ninaja
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build
      # Create symlink for ninja
      - name: Create symlink for ninja
        run: |
          mkdir -p /usr/local/lib/android/sdk/cmake/3.18.1/bin
          sudo ln -s /usr/bin/ninja /usr/local/lib/android/sdk/cmake/3.18.1/bin/ninja

      - uses: actions/setup-java@v4
        with:
          distribution: "oracle"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

          # Download the keystore file (from GitHub Secrets or other storage)
      - name: Download keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.APK_SIGN }}
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/app/dartotsu.jks

      # Set up environment variables for signing
      - name: Set up signing variables
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=dartotsu.jks" >> android/key.properties
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Optimize Flutter build
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk --release --split-per-abi

      - name: Rename APKs
        run: |
          for file in build/app/outputs/flutter-apk/app-*-release.apk; do
            abi=$(basename $file | sed 's/app-\(.*\)-release.apk/\1/')
            mv $file build/app/outputs/flutter-apk/Dartotsu_Android_${abi}_${{github.ref_name}}.apk
          done
          ls build/app/outputs/flutter-apk
      - name: Android Apk Release
        uses: softprops/action-gh-release@master
        with:
          files: build/app/outputs/flutter-apk/Dartotsu_Android_*_${{ github.ref_name }}.apk

  build_windows:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache Flutter and Dart dependencies
      - uses: actions/cache@v4
        with:
          path: |
            C:\hostedtoolcache\windows\flutter
            ~\AppData\Local\Pub\Cache
            build\
            .dart_tool\
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Set up Signing Tool
        run: |
          mkdir $env:USERPROFILE\certs
          [System.IO.File]::WriteAllBytes("$env:USERPROFILE\certs\Dartotsu.pfx", [Convert]::FromBase64String("${{secrets.PFX_FILE}}"))
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $env:SIMKL_SECRET" > .env

      # Setup Flutter with caching
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.1
        with:
          nuget-version: "latest"
      # Enable Windows desktop support
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      - run: flutter clean

      # Get dependencies with cached packages
      - run: flutter pub get

      - name: Extract Version
        id: get_version
        run: |
          $version = (Get-Content pubspec.yaml | Select-String -Pattern 'version: ([\d.]+)').Matches.Groups[1].Value
          echo "version=$version" >> $env:GITHUB_ENV

      - name: Build and Sign Setup
        run: |
          dart run inno_bundle:build --sign-tool-params '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /fd sha256 /f "C:\Users\runneradmin\certs\Dartotsu.pfx" /p "${{secrets.PFX_PASSWORD}}" /t http://timestamp.digicert.com /v $f' --release
      - name: Release Windows Zip
        uses: softprops/action-gh-release@master
        with:
          files: build/windows/x64/installer/Release/Dartotsu-x86_64-${{env.version}}-Installer.exe

  build_linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

      # Step 3: Setup system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev webkit2gtk-4.1 libmpv-dev pkg-config

      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Step 5: Fetch Flutter dependencies
      - name: Fetch Flutter dependencies
        run: flutter pub get

      # Step 6: Build the Linux application
      - name: Build Flutter Linux app
        run: flutter build linux

      # Step 7: Archive the app
      - name: Archive app
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Dartotsu_Linux_${{github.ref_name}}.zip
          directory: build/linux/x64/release/bundle
      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
          files: build/linux/x64/release/bundle/Dartotsu_Linux_${{github.ref_name}}.zip
          
  build_ios:
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash

      # Step 3 Get Dependencies
      - name: Get Dependencies
        run: flutter pub get
      #Step 4 Build app for iOS
      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r Dartotsu-iOS-${{ github.ref_name }}.ipa Payload

      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
          files: build/ios/iphoneos/Dartotsu-iOS-${{github.ref_name}}.ipa
  build_macos:
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true
      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash
      - name: Get Dependencies
        run: flutter pub get
      - name: Build macOS
        run: flutter build macos --release
      - name: Create DMG file for macOS Build
        run: |
          mkdir -p build/macos/Release
          hdiutil create -volname "Dartotsu" -srcfolder build/macos/Build/Products/Release/dartotsu.app -ov -format UDZO build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg
        shell: bash
      - name: Release macOS Zip
        uses: softprops/action-gh-release@master
        with:
          files: build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg

  post-release-notes:
    runs-on: ubuntu-latest
    needs: [generate-changelog]
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch Repository Tags by Date and Time
        id: fetch_tags
        run: |
          curl -s "https://api.github.com/repos/${{github.repository}}/tags" -o tags.json
          TAGS=$(jq -r '.[].name' tags.json)
          declare -a TAGS_WITH_DATES=()
          for TAG in $TAGS; do
            TAG_DETAILS=$(curl -s "https://api.github.com/repos/${{github.repository}}/git/refs/tags/$TAG")
            OBJECT_URL=$(echo "$TAG_DETAILS" | jq -r '.object.url // empty')
            if [ -n "$OBJECT_URL" ]; then
              OBJECT_DETAILS=$(curl -s "$OBJECT_URL")
              DATE=$(echo "$OBJECT_DETAILS" | jq -r '.tagger.date // .committer.date // empty')
              if [ -n "$DATE" ]; then
                TAGS_WITH_DATES+=("$DATE $TAG")
              fi
            fi
          done
          LATEST_TAG=""
          LATEST_DATE=""
          for TAG_DATE in "${TAGS_WITH_DATES[@]}"; do
            TAG_DATE_TIME=$(echo "$TAG_DATE" | awk '{print $1}')
            TAG_NAME=$(echo "$TAG_DATE" | awk '{print $2}')
            if [[ -z "$LATEST_DATE" || "$TAG_DATE_TIME" > "$LATEST_DATE" ]]; then
              LATEST_DATE="$TAG_DATE_TIME"
              LATEST_TAG="$TAG_NAME"
            fi
          done
          echo "$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      - name: Get Latest Release Notes
        id: get_release_notes
        run: |
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body')
          echo "Release Notes: $RELEASE_NOTES"

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Format Release Notes
        id: format_notes
        run: |
          echo "**🚀 Features**" > formatted_notes.txt
          echo "$(echo "$RELEASE_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | head -n 5 || echo 'None')" >> formatted_notes.txt
          echo "" >> formatted_notes.txt

          echo "**🐛 Fixes**" >> formatted_notes.txt
          echo "$(echo "$RELEASE_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfix' | head -n 5 || echo 'None')" >> formatted_notes.txt
          echo "" >> formatted_notes.txt

          echo "**🛠 Chores**" >> formatted_notes.txt
          echo "$(echo "$RELEASE_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\schore' | head -n 5 || echo 'None')" >> formatted_notes.txt
          echo "" >> formatted_notes.txt

          cat formatted_notes.txt
          FORMATTED_NOTES=$(cat formatted_notes.txt) 
          echo "FORMATTED_NOTES<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_RELEASE_URL }}
        run: |
          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          # Ensure VERSION is not empty
          VERSION=${VERSION:-"${{env.LATEST_TAG}}"}


          discord_data=$(jq -nc \
                        --arg field_value "$FORMATTED_NOTES

                        
                        [📌 Full changelog](https://github.com/${{github.repository}}/releases/tag/${{ env.LATEST_TAG }})" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --argjson embed_color "$embed_color" \
                        '{
                          "content": "<@&1298977336124903457>",
                          "embeds": [
                            {
                              "title": "New App Version Dropped 🔥",
                              "color": $embed_color,
                              "description": $field_value,
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ]
                        }')

          echo "Debug: Final Discord payload is: $discord_data"

          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$discord_data" \
              "$DISCORD_WEBHOOK_URL"

      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_TOPIC_ANNOUNCEMENT }}
        run: |
          # Extract Features, Fixes, and Chores into separate files (with cleaning)
          echo "**🚀 Features**" > TFeatures.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt
          echo "**🐛 Fixes**" > TFixes.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfix' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt
          echo "**🛠 Chores**" > TChores.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\schore' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > chores.txt
          chmod +x scripts/tel_commit_parser.sed
          ./scripts/tel_commit_parser.sed feat.txt > feat_clean.txt
          ./scripts/tel_commit_parser.sed fixes.txt > fixes_clean.txt
          ./scripts/tel_commit_parser.sed chores.txt > chores_clean.txt
          ./scripts/tel_commit_parser.sed TFeatures.txt > TFeaturesT.txt
          ./scripts/tel_commit_parser.sed TFixes.txt > TFixesT.txt
          ./scripts/tel_commit_parser.sed TChores.txt > TChoresT.txt
          if [ ! -s feat_clean.txt ] || [ "$(tr -d '[:space:]' < feat_clean.txt)" = "" ]; then
              rm -f feat_clean.txt TFeaturesT.txt
          fi
          if [ ! -s fixes_clean.txt ] || [ "$(tr -d '[:space:]' < fixes_clean.txt)" = "" ]; then
              rm -f fixes_clean.txt TFixesT.txt
          fi
          if [ ! -s chores_clean.txt ] || [ "$(tr -d '[:space:]' < chores_clean.txt)" = "" ]; then
              rm -f chores_clean.txt TChoresT.txt
          fi
          {
              [ -f TFeaturesT.txt ] && [ -f feat_clean.txt ] && echo -n "$(cat TFeaturesT.txt) <blockquote>$(cat feat_clean.txt)</blockquote> "
              [ -f TFixesT.txt ] && [ -f fixes_clean.txt ] && echo -n "$(cat TFixesT.txt) <blockquote>$(cat fixes_clean.txt)</blockquote> "
              [ -f TChoresT.txt ] && [ -f chores_clean.txt ] && echo -n "$(cat TChoresT.txt) <blockquote>$(cat chores_clean.txt)</blockquote> "
          } > output.txt
          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          echo -n "<a href='https://github.com/${{github.repository}}/releases/tag/${{ env.LATEST_TAG }}'>📌 Full changelog</a>" >> output.txt
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "message_thread_id=$TELEGRAM_TOPIC" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"

  upload_download_url:
    runs-on: ubuntu-latest
    needs: [post-release-notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: echo "${{secrets.FINE_GRAIN_TOKEN}}" | gh auth login --with-token

      - name: Fetch latest release assets with gh
        id: fetch_assets
        run: |
          gh release view --repo ${{github.repository}} ${{github.ref_name}} --json assets --jq '.assets[].url' > asset_links.txt

      - name: Print fetched List
        run: cat asset_links.txt

      - name: Read, sort, and format links from the file
        id: format_links
        run: |
          # Read links from the file
          LINKS=$(cat asset_links.txt | sort)

          # Initialize the message
          MESSAGE="**Dartotsu ${{github.ref_name}} Downloads:**\n\n"

          # Loop through each link and format them
          while IFS= read -r LINK; do
            if [[ $LINK == *"arm64"* ]]; then
              MESSAGE+="• [Android_arm64]($LINK)\n"
            elif [[ $LINK == *"armeabi"* ]]; then
              MESSAGE+="• [Android_armeabi-v7a]($LINK)\n"
            elif [[ $LINK == *"Android_x86"* ]]; then
              MESSAGE+="• [Android_x86_64]($LINK)\n"
            elif [[ $LINK == *"iOS"* ]]; then
              MESSAGE+="• [iOS]($LINK)\n"
            elif [[ $LINK == *"Linux"* ]]; then
              MESSAGE+="• [Linux]($LINK)\n"
            elif [[ $LINK == *"macos"* ]]; then
              MESSAGE+="• [macOS]($LINK)\n"
            elif [[ $LINK == *"Installer"* ]]; then
              MESSAGE+="• [Windows]($LINK)\n"
            fi
          done <<< "$LINKS"

          # Save the message to an environment variable
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_RELEASE_URL }}
          MESSAGE: ${{ env.MESSAGE }}
        run: |
          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$MESSAGE\"}" \
            $DISCORD_WEBHOOK_URL
      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_TOPIC_ANNOUNCEMENT }}

          MESSAGE: ${{ env.MESSAGE }}
        run: |

          FORMATTED_MESSAGE=$(echo -e "$MESSAGE")
          # Send the message to Telegram using the Bot API
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "message_thread_id=$TELEGRAM_TOPIC" \
            -d text="$FORMATTED_MESSAGE" \
            -d parse_mode="Markdown"

  generate-changelog:
    runs-on: ubuntu-latest
    needs: [build_android, build_windows, build_linux, build_ios, build_macos]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Clear existing CHANGELOG.md
      - name: Clear CHANGELOG.md
        run: |
          echo ""> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Get previous tag
        id: get_prev_tag
        run: |
          echo "Getting the previous tag..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Get commit messages between tags
        id: get_commits
        run: |
          COMMITS=$(git log ${{ env.prev_tag }}..HEAD --pretty=format:'%h %s' | tr '\n' '|')
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Categorize commits
        id: categorize
        run: |
          echo "Categorizing commits..."
          FEATURES=""
          BUG_FIXES=""
          REFACTORS=""
          STYLE_CHANGES=""
          PERFORMANCE=""
          CHORES=""
          REPO_URL="https://github.com/${{ github.repository }}"

          IFS='|' read -ra COMMIT_LIST <<< "${{ env.commits }}"
          echo "Commit list: ${COMMIT_LIST[@]}"
          for LINE in "${COMMIT_LIST[@]}"; do
          HASH=$(echo "$LINE" | awk '{print $1}')
          MESSAGE=$(echo "$LINE" | cut -d' ' -f2-)
          LINK="[$HASH]($REPO_URL/commit/$HASH)"

          FORMATTED_COMMIT="* $LINK: $MESSAGE"
          echo "Processing commit: $FORMATTED_COMMIT"
          if [[ $MESSAGE == feat* ]]; then
           FEATURES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == fix* || $MESSAGE == bug* || $MESSAGE == improvement* || $MESSAGE == patch* ]]; then
          BUG_FIXES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == refactor* ]]; then
          REFACTORS+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == style* ]]; then
          STYLE_CHANGES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == perf* ]]; then
          PERFORMANCE+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == chore* || $MESSAGE == docs* || $MESSAGE == build* || $MESSAGE == ci* ]]; then
          CHORES+="$FORMATTED_COMMIT\n"
          fi
          done

          # Removed the version tag section
          # echo "### ${GITHUB_REF#refs/tags/}" >> CHANGELOG.md  # No version tag added

          if [ -n "$FEATURES" ]; then
          echo "### 🎉 New Features" >> CHANGELOG.md
          echo -e "$FEATURES" >> CHANGELOG.md
          fi
          if [ -n "$BUG_FIXES" ]; then
          echo "### 🛠️ Bug Fixes & Improvements" >> CHANGELOG.md
          echo -e "$BUG_FIXES" >> CHANGELOG.md
          fi
          if [ -n "$REFACTORS" ]; then
          echo "### 🔧 Refactors" >> CHANGELOG.md
          echo -e "$REFACTORS" >> CHANGELOG.md
          fi
          if [ -n "$STYLE_CHANGES" ]; then
          echo "### 🎨 Style Changes" >> CHANGELOG.md
          echo -e "$STYLE_CHANGES" >> CHANGELOG.md
          fi
          if [ -n "$PERFORMANCE" ]; then
          echo "### 🚀 Performance Improvements" >> CHANGELOG.md
            echo -e "$PERFORMANCE" >> CHANGELOG.md
          fi
          if [ -n "$CHORES" ]; then
            echo "### 🧹 Chores & Documentation" >> CHANGELOG.md
            echo -e "$CHORES" >> CHANGELOG.md
          fi

      - name: Commit and push changelog
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "Update changelog for version ${{ github.ref_name }}"
          git push origin HEAD:main

      - name: Set Tag Variable
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: CHANGELOG.md
          tag: ${{ env.TAG }}
          allowUpdates: true
